from typing import List
from prowler.lib.check.models import Check, CheckReportM365
from prowler.providers.common.provider import Provider
import json

class defender_malware_policy_internal_sender_admin_notifications_enabled(Check):
    def execute(self) -> List[CheckReportM365]:
        findings = []
        provider = Provider.get_global_provider()
        provider.session.execute("Import-Module ExchangeOnlineManagement -ErrorAction SilentlyContinue")
        from prowler.providers.m365.lib.powershell.m365_powershell import M365PowerShell
        exo_auth_args = M365PowerShell.get_exchange_online_auth_args(provider._credentials)
        # Avoid duplicate -AppId and -Organization if already in exo_auth_args
        if "-AppId" in exo_auth_args or "-Organization" in exo_auth_args:
            connect_cmd = f"Connect-ExchangeOnline {exo_auth_args}"
        else:
            connect_cmd = (
                f"Connect-ExchangeOnline {exo_auth_args} "
                f"-AppId '{provider.client_id}' -Organization '{provider.organization}'"
            )
        print(f"[DEBUG] Connecting to ExchangeOnline: {connect_cmd}", flush=True)
        provider.session.execute(connect_cmd)
        result = provider.session.execute("Get-MalwareFilterPolicy | Select-Object Identity,EnableInternalSenderAdminNotifications,InternalSenderAdminAddress | ConvertTo-Json")
        # Handle both str and list result
        if isinstance(result, str):
            try:
                policies = json.loads(result)
                if isinstance(policies, dict):
                    policies = [policies]
            except Exception:
                policies = []
        elif isinstance(result, list):
            policies = result
        else:
            policies = []
        if not policies:
            report = CheckReportM365(
                metadata=self.metadata(),
                resource={},
                resource_name="Malware Filter Policy",
                resource_id="MalwareFilterPolicy",
                resource_location="global",
            )
            report.status = "MANUAL"
            report.status_extended = (
                "Malware Filter Policy data is unavailable. Ensure you have permission to run Get-MalwareFilterPolicy."
            )
            findings.append(report)
            return findings
        for policy in policies:
            meets_criteria = (
                policy.get("EnableInternalSenderAdminNotifications", False) is True and
                bool(policy.get("InternalSenderAdminAddress", "").strip())
            )
            report = CheckReportM365(
                metadata=self.metadata(),
                resource=policy,
                resource_name=policy.get("Identity", "Unknown"),
                resource_id=policy.get("Identity", "Unknown"),
                resource_location="global",
            )
            if meets_criteria:
                report.status = "PASS"
                report.status_extended = (
                    f"Policy '{policy.get('Identity', 'Unknown')}' has internal sender admin notifications enabled and admin address set."
                )
            else:
                report.status = "FAIL"
                report.status_extended = (
                    f"Policy '{policy.get('Identity', 'Unknown')}' does NOT have internal sender admin notifications enabled or admin address is not set."
                )
            findings.append(report)
        return findings
